using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Drawing.Imaging;
using System.Drawing.Printing;
using System.IO;
using System.Text;
using Microsoft.Reporting.WebForms;

/// <summary>
/// Printer 的摘要说明
/// </summary>
public class Printer : IDisposable
{
    private int m_currentPageIndex;
    private IList<Stream> m_streams;

    /// <summary>
    /// Routine to provide to the report renderer, in order to save an image for each page of the report.
    /// </summary>
    /// <param name="name"></param>
    /// <param name="fileNameExtension"></param>
    /// <param name="encoding"></param>
    /// <param name="mimeType"></param>
    /// <param name="willSeek"></param>
    /// <returns></returns>
    private Stream CreateStream(string name,
      string fileNameExtension, Encoding encoding,
      string mimeType, bool willSeek)
    {
        Stream stream = new FileStream(@"Reports\" + name + "." + fileNameExtension, FileMode.Create);
        m_streams.Add(stream);
        return stream;
    }

    /// <summary>
    /// Export the given report as an EMF (Enhanced Metafile) file.
    /// </summary>
    /// <param name="report"></param>
    private void Export(LocalReport report)
    {
        string deviceInfo =
          "<DeviceInfo>" +
          "  <OutputFormat>EMF</OutputFormat>" +
          "  <PageWidth>8.5in</PageWidth>" +
          "  <PageHeight>11in</PageHeight>" +
          "  <MarginTop>0.25in</MarginTop>" +
          "  <MarginLeft>0.25in</MarginLeft>" +
          "  <MarginRight>0.25in</MarginRight>" +
          "  <MarginBottom>0.25in</MarginBottom>" +
          "</DeviceInfo>";
        Warning[] warnings;
        m_streams = new List<Stream>();
        report.Render("Image", deviceInfo, CreateStream, out warnings);
        foreach (Stream stream in m_streams)
            stream.Position = 0;
    }

    /// <summary>
    /// Handler for PrintPageEvents
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="ev"></param>
    private void PrintPage(object sender, PrintPageEventArgs ev)
    {
        Metafile pageImage = new Metafile(m_streams[m_currentPageIndex]);
        ev.Graphics.DrawImage(pageImage, ev.PageBounds);
        m_currentPageIndex++;
        ev.HasMorePages = (m_currentPageIndex < m_streams.Count);
    }

    /// <summary>
    /// Create a local report for Report.rdlc, load the data, export the report to an .emf file, and print it.
    /// </summary>
    public void Print(string rdlc, object dataSource)
    {
        LocalReport report = new LocalReport();
        report.ReportPath = rdlc;
        report.DataSources.Add(new ReportDataSource("Report", dataSource));
        Export(report);
        m_currentPageIndex = 0;

        const string printerName = "Microsoft Office Document Image Writer";
        if (m_streams == null || m_streams.Count == 0)
            return;
        PrintDocument printDoc = new PrintDocument();
        printDoc.PrinterSettings.PrinterName = printerName;
        if (!printDoc.PrinterSettings.IsValid)
        {
            string msg = String.Format("Can't find printer \"{0}\".", printerName);
            throw new Exception(msg);
        }
        printDoc.PrintPage += new PrintPageEventHandler(PrintPage);
        printDoc.Print();
    }

    public void Dispose()
    {
        if (m_streams != null)
        {
            foreach (Stream stream in m_streams)
                stream.Close();
            m_streams = null;
        }
    }

}